package pojo;

import DAO.LoginDAO;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.faces.bean.ManagedBean;
import javax.servlet.http.HttpSession;
import javax.faces.bean.ViewScoped;
import javax.faces.event.AjaxBehaviorEvent;

/**
 * Login generated by hbm2java
 */
@ManagedBean
@ViewScoped
public class Login implements java.io.Serializable {

    private Integer id;
    private String email;
    private String password;
    private String role;
    private String searchCriteria;
    private List<Login> loginList;
    private LoginDAO loginDAO = new LoginDAO();

    
    
public String Login_s() {
    List<Login> us = new ArrayList<>(); // Inisialisasi dengan list kosong

    try {
        us = loginDAO.getBy(email, password); // Mendapatkan list dari DAO
        
        // Pastikan list tidak kosong
        if (us != null && !us.isEmpty()) {
            // Ambil email dan password dari objek Login yang ditemukan
            this.email = us.get(0).getEmail(); // Menggunakan getter
            this.password = us.get(0).getPassword(); // Menggunakan getter
            return "List";
        }
    } catch (Exception e) {
        e.printStackTrace(); // Menampilkan stack trace untuk debugging
    }
    return "Login_error";
}

    public Login() {
            this.loginDAO = new LoginDAO();
    }
        
    public Login(LoginDAO LoginDAO) {
        this.loginDAO = LoginDAO;
    }
    
    public LoginDAO getLoginDAO() {
        return this.loginDAO;
    }
    
    public void setLoginDAO(LoginDAO LoginDAO) {
        this.loginDAO = LoginDAO;
    }

    public Login(Integer id, String email, String password, String role) {
        this.id = id;
        this.email = email;
        this.password = password;
        this.role = role;
    }    
    
    
    
    @PostConstruct
    public void init() {
        if (id != null) {
            List<Login> LoginData = loginDAO.getById(id);
            if (LoginData != null && !LoginData.isEmpty()) {
                Login log = LoginData.get(0);
                this.email = log.getEmail();        // Set waktu dari data database
                this.password = log.getPassword(); // Set layanan dari data database
                this.role = log.getRole();
            }
        }
    }
        
    // Getter and Setter for id
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    // Getter and Setter for email
    public String getEmail() {
        return this.email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    // Getter and Setter for password
    public String getPassword() {
        return this.password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    // Getter and Setter for role
    public String getRole() {
        return this.role;
    }

    public void setRole(String role) {
        this.role = role;
    }
    
    public String getSearchCriteria() { return searchCriteria; }
    public void setSearchCriteria(String searchCriteria) { this.searchCriteria = searchCriteria; }
    
    
    // Getter for loginList
    public List<Login> getLoginList() {
        if (loginList == null || searchCriteria == null || searchCriteria.isEmpty()) {
            loginList = loginDAO.retrieveLogin();
        }
        return loginList;
    }
    
    public void setLoginList(List<Login> loginList) {
        this.loginList = loginList;
    }
    
    public void filterLogin(AjaxBehaviorEvent event) {
        if (searchCriteria != null && !searchCriteria.isEmpty()) {
            loginList = loginDAO.searchLogin(searchCriteria, null, null, null);
        } else {
            loginList = loginDAO.retrieveLogin();
        }
    }
    
    // Method to save a new login
    public String saveLogin() {
        loginDAO.addLogin(this);
        return "admindetail";
    }
    
    // Method to edit an existing login
    public String editLogin() {
        Login login = new Login();
        login.setId(this.id);            // Set the ID from the current bean
        login.setEmail(this.email);        // Set time from the form
        login.setPassword(this.password);
        login.setRole(this.role);
        
        loginDAO.editLogin(this);
        return "admindetail.xhtml?faces-redirect=true";
    }
    
    // Method to delete login by ID
    public String deleteLogin() {
        if (this.id != null) {
        LoginDAO loginDAO = new LoginDAO();
        loginDAO.deleteLogin(this.id); // Call DAO to delete schedule by ID
    }
    return null;
    }
    
    // Method to retrieve login by ID for editing
    public String getById(int loginId) {
        List<Login> LoginData = loginDAO.getById(loginId);
        if (LoginData != null && !LoginData.isEmpty()) {
                this.id = LoginData.get(0).getId();
                this.email = LoginData.get(0).getEmail();
                this.password = LoginData.get(0).getPassword();
                this.role = LoginData.get(0).getRole();
                return "admindetailedit";
            }
        System.out.println("Admin not found for ID: " + loginId);
        return "index";
    }
    
    public void loadLogin() {
        if (id != null) {
            List<Login> loginList = loginDAO.getById(id);
            if (loginList != null && !loginList.isEmpty()) {
                Login log = loginList.get(0);
                this.email = log.getEmail(); // Load time from DB
                this.password = log.getPassword(); // Load services from DB
                this.role = log.getRole();
            }
        }
    }
    
    public String logout(HttpSession session) {
    if (session != null) {
        session.invalidate();
    }
    return "index";
}



    // Method to retrieve all login data from the database
    public List<Login> getAllLogin() {
        LoginDAO loginDAO = new LoginDAO();
        return loginDAO.retrieveLogin();
    }
    
    public List<Login> getAllLoginRecords() {
        LoginDAO list = new LoginDAO();
        List<Login> loginList = list.retrieveLogin();
        return loginList;
    }
    
    public List<Login> searchLogin() {
        return loginDAO.searchLogin(null, email, password, role);
}


}
